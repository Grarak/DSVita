float3 in objPos : TEXCOORD0;
float2 in objDims : TEXCOORD1;
float2 in screenPosF : TEXCOORD2;

uniform sampler2D oamTex : TEXUNIT0;
uniform sampler2D objTex : TEXUNIT1;
uniform sampler2D palTex : TEXUNIT2;
uniform sampler2D extPalTex : TEXUNIT3;
uniform sampler2D winTex : TEXUNIT4;

uniform int dispCnt;
uniform ObjUbo {
    int mapWidths[128];
    int objBounds[128];
} ObjUbo : BUFFER[0];

short readOam16Aligned(short addr) {
    float x = float(addr >> 2) / 255.0f;
    float4 value = tex2D(oamTex, float2(x, 1.0));
    short entry = addr & 2;
    return short(value[entry] * 255.0) | (short(value[entry + 1] * 255.0) << 8);
}

short readObj8(int addr) {
    short addrX = (addr >> 2) & 0x1FF;
    short addrY = addr >> 11;
    float x = float(addrX) / 511.0f;
    float y = float(addrY) / (OBJ_TEX_HEIGHT - 1.0);
    return int(tex2D(objTex, float2(x, y))[addr & 3] * 255.0);
}

short readObj16Aligned(int addr) {
    short addrX = (addr >> 2) & 0x1FF;
    short addrY = addr >> 11;
    float x = float(addrX) / 511.0f;
    float y = float(addrY) / (OBJ_TEX_HEIGHT - 1.0);
    float4 value = tex2D(objTex, float2(x, y));
    short entry = addr & 2;
    return short(value[entry] * 255.0) | (short(value[entry + 1] * 255.0) << 8);
}

float4 readPal(short index) {
    return tex2D(palTex, float2(float(index) / 511.0, 1.0));
}

float4 readExtPal(short index) {
    short indexX = index & 0x1FF;
    short indexY = index >> 9;
    float x = float(indexX) / 511.0;
    float y = float(indexY) / 7.0;
    return tex2D(extPalTex, float2(x, y));
}

float3 normRgb5(short color) {
    return float3(float(color & 0x1F), float((color >> 5) & 0x1F), float((color >> 10) & 0x1F)) / 31.0;
}

float4 drawSprite(short objX, short objY, short attrib0, short oamIndex) {
    short mapWidth = short(ObjUbo.mapWidths[oamIndex]);
    short objBound = short(ObjUbo.objBounds[oamIndex]);

    short attrib2 = readOam16Aligned(oamIndex * 8 + 4);

    int tileIndex = attrib2 & 0x3FF;
    int tileAddr = tileIndex * objBound;

    bool is8bpp = (attrib0 & (1 << 13)) != 0;
    if (is8bpp) {
        tileAddr += ((objY & 7) + (objY >> 3) * mapWidth) * 8;
        tileAddr += (objX >> 3) * 64 + (objX & 7);

        int palIndex = readObj8(tileAddr);
        if (palIndex == 0) {
            discard;
        }

        bool useExtPal = (dispCnt & (1 << 31)) != 0;
        if (useExtPal) {
            int palBaseIndex = (attrib2 & 0xF000) >> 4;
            return float4(readExtPal(palBaseIndex + palIndex).rgb, 1.0);
        } else {
            return float4(readPal(0x100 + palIndex).rgb, 1.0);
        }
    } else {
        tileAddr += ((objY & 7) + (objY >> 3) * mapWidth) * 4;
        tileAddr += (objX >> 3) * 32 + (objX & 7) / 2;

        short palIndex = readObj8(tileAddr);
        palIndex >>= 4 * (objX & 1);
        palIndex &= 0xF;
        if (palIndex == 0) {
            discard;
        }

        short palBank = (attrib2 >> 12) & 0xF;
        short palBase = 0x100 + palBank * 16;
        return float4(readPal(palBase + palIndex).rgb, 1.0);
    }
}

float4 drawBitmap(short objX, short objY, short oamIndex) {
    int bitmapWidth = ObjUbo.mapWidths[oamIndex];
    int dataBase = ObjUbo.objBounds[oamIndex];

    int objColor = readObj16Aligned(dataBase + (objY * bitmapWidth + objX) * 2);
    if ((objColor & (1 << 15)) == 0) {
        discard;
    }
    return float4(normRgb5(objColor), 1.0);
}

void main(out float4 color : COLOR) {
    short objWidth = short(objDims.x);
    short objHeight = short(objDims.y);
    short objY = short(objPos.y);
    short objX = short(objPos.x);

    if (objX < 0 || objX >= objWidth || objY < 0 || objY >= objHeight) {
        discard;
    }

    short winEnabled = short(tex2D(winTex, screenPosF).x * 255.0);
    if ((winEnabled & (1 << 4)) == 0) {
        discard;
    }

    short oamIndex = short(objPos.z);

    short attrib0 = readOam16Aligned(oamIndex * 8);

    bool isBitmap = (attrib0 & 0xC00) == 0xC00;
    if (isBitmap) {
        color = drawBitmap(objX, objY, oamIndex);
    } else {
        color = drawSprite(objX, objY, attrib0, oamIndex);
    }

    bool semiTransparent = ((attrib0 >> 10) & 3) == 1;
    if (semiTransparent) {
        color.a = 0.0;
    }
}
