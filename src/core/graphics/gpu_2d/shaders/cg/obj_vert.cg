float4 out gl_Position : POSITION;
float3 out objPos : TEXCOORD0;
float2 out objDims : TEXCOORD1;
float2 out screenPosF : TEXCOORD2;

uniform sampler2D oamTex : TEXUNIT0;

uniform int dispCnt;

short readOam16Aligned(short addr) {
    float x = float(addr >> 2) / 255.0f;
    float4 value = tex2D(oamTex, float2(x, 1.0));
    short entry = addr & 2;
    return short(value[entry] * 255.0) | (short(value[entry + 1] * 255.0) << 8);
}

static const float2 SizeLookup[12] = {
    float2(8.0, 8.0), float2(16.0, 16.0), float2(32.0, 32.0), float2(64.0, 64.0), float2(16.0, 8.0), float2(32.0, 8.0),
    float2(32.0, 16.0), float2(64.0, 32.0), float2(8.0, 16.0), float2(8.0, 32.0), float2(16.0, 32.0), float2(32.0, 64.0),
};

void main(float2 position, float oamIndex) {
    short index = short(oamIndex);

    short attrib0 = readOam16Aligned(index * 8);
    short attrib1 = readOam16Aligned(index * 8 + 2);
    short attrib2 = readOam16Aligned(index * 8 + 4);

    short oamX = short(attrib1 & 0x1FF);
    short oamY = short(attrib0 & 0xFF);

    int shape = (attrib0 >> 12) & 0xC;
    int size = (attrib1 >> 14) & 0x3;

    float2 oamDims = SizeLookup[shape | size];
    float oamWidth = oamDims.x;
    float oamHeight = oamDims.y;
    objDims = short2(oamWidth, oamHeight);

    if (oamX >= 256) {
        oamX -= 512;
    }

    if (oamY >= 192) {
        oamY -= 256;
    }

    float2 pos = position;

    bool affine = (attrib0 & (1 << 8)) != 0;
    if (affine) {
        short affineIndex = (attrib1 >> 9) & 0x1F;
        short affineOffset = affineIndex * 0x20;
        short pa = readOam16Aligned(affineOffset + 6);
        short pb = readOam16Aligned(affineOffset + 14);
        short pc = readOam16Aligned(affineOffset + 22);
        short pd = readOam16Aligned(affineOffset + 30);
        float2x2 m = float2x2(float(pa), float(pb), float(pc), float(pd)) / 256.0;

        bool doubleAffine = (attrib0 & (1 << 9)) != 0;
        if (doubleAffine) {
            float2 normPos = mul(m, float2(max(oamWidth * 2.0 * pos.x - 0.9, 0.0) - oamWidth, max(oamHeight * 2.0 * pos.y - 0.9, 0.0) - oamHeight));
            objPos = float3(normPos.x + oamWidth / 2.0, normPos.y + oamHeight / 2.0, oamIndex);
            oamWidth *= 2.0;
            oamHeight *= 2.0;
        } else {
            float2 normPos = mul(m, float2(max(oamWidth * pos.x - 0.5, 0.0) - oamWidth / 2.0, max(oamHeight * pos.y - 0.5, 0.0) - oamHeight / 2.0));
            objPos = float3(normPos.x + oamWidth / 2.0, normPos.y + oamHeight / 2.0, oamIndex);
        }
    } else {
        bool isVFlip = (attrib1 & (1 << 13)) != 0;
        bool isHFlip = (attrib1 & (1 << 12)) != 0;

        if (isVFlip) {
            pos.y -= 1.0;
            pos.y = abs(pos.y);
        }

        if (isHFlip) {
            pos.x -= 1.0;
            pos.x = abs(pos.x);
        }

        objPos = float3((oamWidth - 0.1) * pos.x, (oamHeight - 0.1) * pos.y, oamIndex);
    }

    float x = float(oamX) + oamWidth * position.x;
    float y = float(oamY) + oamHeight * position.y;

    screenPosF = float2(x / 256.0, y / 192.0);

    short priority = short((attrib2 >> 10) & 3);
    gl_Position = float4(screenPosF.x * 2.0 - 1.0, 1.0 - screenPosF.y * 2.0, float(priority) / 4.0, 1.0);
}
