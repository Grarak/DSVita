float4 drawAffine(int x, int y, int bgNum) {
    short size = short(affineDims.x);

    int2 coords = int2(calculateAffineCoords(x, y, bgNum));

    bool wrap = (bgCnt & (1 << 13)) != 0;
    if (wrap) {
        coords.x &= size - 1;
        coords.y &= size - 1;
    } else if (coords.x < 0 || coords.x >= size || coords.y < 0 || coords.y >= size) {
        discard;
    }

    int screenAddr = ((dispCnt >> 11) & 0x70000) + ((bgCnt << 3) & 0x0F800);
    int charAddr = ((dispCnt >> 8) & 0x70000) + ((bgCnt << 12) & 0x3C000);

    int xBlockNum = coords.x >> 3;
    int xInBlock = coords.x & 7;
    int yBlockNum = coords.y >> 3;
    int yInBlock = coords.y & 7;

    screenAddr += (yBlockNum * (size >> 3) + xBlockNum) * 2;
    int screenEntry = readBg16Aligned(screenAddr);

    bool isHFlip = (screenEntry & (1 << 10)) != 0;
    bool isVFlip = (screenEntry & (1 << 11)) != 0;

    if (isHFlip) {
        xInBlock = 7 - xInBlock;
    }
    if (isVFlip) {
        yInBlock = 7 - yInBlock;
    }

    charAddr += (screenEntry & 0x3FF) * 64 + yInBlock * 8 + xInBlock;

    int palIndex = readBg8(charAddr);
    if (palIndex == 0) {
        discard;
    }

    bool useExtPal = (dispCnt & (1 << 30)) != 0;
    if (useExtPal) {
        palIndex += bgNum * 4096 + ((screenEntry & 0xF000) >> 4);
        return float4(readExtPal(palIndex).rgb, 1.0);
    } else {
        return float4(readPal(palIndex).rgb, 1.0);
    }
}

void main(out float4 color : COLOR) {
    short bgNum = short(screenPos.z);

    short winEnabled = short(tex2D(winTex, screenPosF).x * 255.0);
    if ((winEnabled & (1 << bgNum)) == 0) {
        discard;
    }

    short x = short(screenPos.x);
    short y = short(screenPos.y);

    color = drawAffine(x, y, bgNum);

    short priority = short(bgCnt & 3);
    color.a = float(priority) / 4.0;
}
